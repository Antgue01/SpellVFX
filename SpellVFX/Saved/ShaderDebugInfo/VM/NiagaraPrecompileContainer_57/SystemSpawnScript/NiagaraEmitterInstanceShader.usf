#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 42 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 457 "/Engine/Public/Platform.ush"
void ShaderYield()
{

}
#line 691 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}
#line 848 "/Engine/Public/Platform.ush"
float CondMask(bool Cond, float Src0, float Src1) { return Cond ? Src0 : Src1; }
float2 CondMask(bool Cond, float2 Src0, float2 Src1) { return Cond ? Src0 : Src1; }
float3 CondMask(bool Cond, float3 Src0, float3 Src1) { return Cond ? Src0 : Src1; }
float4 CondMask(bool Cond, float4 Src0, float4 Src1) { return Cond ? Src0 : Src1; }

int CondMask(bool Cond, int Src0, int Src1) { return Cond ? Src0 : Src1; }
int2 CondMask(bool Cond, int2 Src0, int2 Src1) { return Cond ? Src0 : Src1; }
int3 CondMask(bool Cond, int3 Src0, int3 Src1) { return Cond ? Src0 : Src1; }
int4 CondMask(bool Cond, int4 Src0, int4 Src1) { return Cond ? Src0 : Src1; }

uint CondMask(bool Cond, uint Src0, uint Src1) { return Cond ? Src0 : Src1; }
uint2 CondMask(bool Cond, uint2 Src0, uint2 Src1) { return Cond ? Src0 : Src1; }
uint3 CondMask(bool Cond, uint3 Src0, uint3 Src1) { return Cond ? Src0 : Src1; }
uint4 CondMask(bool Cond, uint4 Src0, uint4 Src1) { return Cond ? Src0 : Src1; }




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }









uint BitFieldInsertU32(uint Mask, uint Preserve, uint Enable)
{
	return (Preserve & Mask) | (Enable & ~Mask);
}

uint BitFieldExtractU32(uint Data, uint Size, uint Offset)
{
	Size &= 31u;
	Offset &= 31u;

	if (Size == 0u)
		return 0u;
	else if (Offset + Size < 32u)
		return (Data << (32u - Size - Offset)) >> (32u - Size);
	else
		return Data >> Offset;
}

int BitFieldExtractI32(int Data, uint Size, uint Offset)
{
	Size &= 31u;
	Offset &= 31u;

	if (Size == 0u)
		return 0;
	else if (Offset + Size < 32u)
		return (Data << (32u - Size - Offset)) >> (32u - Size);
	else
		return Data >> Offset;
}

uint BitFieldMaskU32(uint MaskWidth, uint MaskLocation)
{
	MaskWidth &= 31u;
	MaskLocation &= 31u;

	return ((1u << MaskWidth) - 1u) << MaskLocation;
}




uint BitAlignU32(uint High, uint Low, uint Shift)
{
	Shift &= 31u;

	uint Result = Low >> Shift;
	Result |= Shift > 0u ? (High << (32u - Shift)) : 0u;
	return Result;
}




uint ByteAlignU32(uint High, uint Low, uint Shift)
{
	return BitAlignU32(High, Low, Shift * 8);
}
#line 948 "/Engine/Public/Platform.ush"
uint2  PackUlongType(uint2 Value)
{
	return Value;
}

uint2 UnpackUlongType( uint2  Value)
{
	return Value;
}




uint MaskedBitCount( uint2 Bits, uint Index )
{
	bool bLow = Index < 32;

	uint Mask = 1u << ( Index - ( bLow ? 0 : 32 ) );
	Mask -= 1;

	uint Offset;
	Offset = countbits( Bits.x & ( bLow ? Mask : ~0u ) );
	Offset += countbits( Bits.y & ( bLow ? 0 : Mask ) );
	return Offset;
}
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 9 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "NiagaraShaderVersion.ush"
#line 10 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"





	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 20 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 214 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 344 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);




int hash_single(int a)
{
    int x = (a ^ 61) ^ (a >> 16);
	x += x << 3;
	x ^= x >> 4;
	x *= 0x27d4eb2d;
	x ^= x >> 15;
	return x;
}

int hash(int a, int b)
{
	return hash_single(a) ^ hash_single(b * 31);
}

float hash_float(int a, int b)
{
	return (hash(a, b) & 0x00ffffff) / 16777216.0;
}


float hash_float(float a, int b)
{
	return (hash(a * 16777216.0, b) & 0x00ffffff) / 16777216.0;
}


float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return (int) rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 454 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);
	float InputDataHalf(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
	void OutputDataHalf(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
#line 767 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 781 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}



struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};
#line 827 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraSpawnInfo
{
	int Count;
	float InterpStartDt;
	float IntervalDt;
	int SpawnGroup;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
	int Engine_QualityLevel;
	int Engine_PaddingInt32_0;
	int Engine_PaddingInt32_1;
	int Engine_PaddingInt32_2;
}

cbuffer FNiagaraSystemParameters
{
}

cbuffer FNiagaraOwnerParameters
{
}

cbuffer FNiagaraEmitterParameters
{
}

cbuffer FNiagaraExternalParameters
{
	int Emitter_RandomSeed;
}

struct FParamMap0_VerticalInitiator_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_VerticalInitiator_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_VerticalInitiator
{
	float Age;
	float CurrentLoopDuration;
	float DistanceTraveled;
	int ExecutionState;
	int ExecutionStateSource;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_VerticalInitiator_Scalability Scalability;
	FParamMap0_VerticalInitiator_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
};

struct FParamMap0_VerticalAttractor_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_VerticalAttractor_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_VerticalAttractor
{
	float Age;
	float CurrentLoopDelay;
	float CurrentLoopDuration;
	float DistanceTraveled;
	int ExecutionState;
	int ExecutionStateSource;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_VerticalAttractor_Scalability Scalability;
	FParamMap0_VerticalAttractor_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
};

struct FParamMap0_System
{
	float Age;
	bool bCompleteOnInactive;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
};

struct FParamMap0_PentagramRibbon_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_PentagramRibbon_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_PentagramRibbon
{
	float Age;
	float CurrentLoopDelay;
	float CurrentLoopDuration;
	float DistanceTraveled;
	int ExecutionState;
	int ExecutionStateSource;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_PentagramRibbon_Scalability Scalability;
	FParamMap0_PentagramRibbon_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
};

struct FParamMap0_NotesRibbon_SpawnRate
{
	NiagaraSpawnInfo SpawnOutputInfo;
	float SpawnRemainder;
};

struct FParamMap0_NotesRibbon_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_NotesRibbon
{
	float Age;
	float CurrentLoopDelay;
	float CurrentLoopDuration;
	float DistanceTraveled;
	int ExecutionState;
	int ExecutionStateSource;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_NotesRibbon_Scalability Scalability;
	FParamMap0_NotesRibbon_SpawnRate SpawnRate;
	float SpawnRate;
};

struct FParamMap0_Engine_System
{
	int RandomSeed;
};

struct FParamMap0_Engine_Emitter
{
	int InstanceSeed;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	float InverseDeltaTime;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	int QualityLevel;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	int RandomSeed;
};

struct FParamMap0_Core_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Core_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Core
{
	float Age;
	float CurrentLoopDuration;
	float DistanceTraveled;
	int ExecutionState;
	int ExecutionStateSource;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Core_Scalability Scalability;
	FParamMap0_Core_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
};

struct FParamMap0
{
	FParamMap0_Core Core;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_NotesRibbon NotesRibbon;
	FParamMap0_PentagramRibbon PentagramRibbon;
	FParamMap0_System System;
	FParamMap0_VerticalAttractor VerticalAttractor;
	FParamMap0_VerticalInitiator VerticalInitiator;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void NotesRibbon_74D5A51F455A325AC303E896FB5AB72E_Func_(inout FSimulationContext Context);
void PentagramRibbon_5A12BF0D4CE507FC7FD8DA901BA7DDE5_Func_(inout FSimulationContext Context);
void Core_E568DC9E48B203F38AF78FA1DA8EBF3A_Func_(inout FSimulationContext Context);
void VerticalAttractor_CDA5E1264D3C5FA0D0FF9EBDAA07D65B_Func_(inout FSimulationContext Context);
void SetVariables_63FA603349D7F6C5DC38318FF43F97C0_VerticalInitiator_Func_(inout FSimulationContext Context);
void VerticalInitiator_CF4E88134CDB351D0C7F7D9ACDBA126A_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void NotesRibbon_74D5A51F455A325AC303E896FB5AB72E_Func_(inout FSimulationContext Context)
{

}

void PentagramRibbon_5A12BF0D4CE507FC7FD8DA901BA7DDE5_Func_(inout FSimulationContext Context)
{

}

void Core_E568DC9E48B203F38AF78FA1DA8EBF3A_Func_(inout FSimulationContext Context)
{

}

void VerticalAttractor_CDA5E1264D3C5FA0D0FF9EBDAA07D65B_Func_(inout FSimulationContext Context)
{

}

void SetVariables_63FA603349D7F6C5DC38318FF43F97C0_VerticalInitiator_Func_(inout FSimulationContext Context)
{

}

void VerticalInitiator_CF4E88134CDB351D0C7F7D9ACDBA126A_Func_(inout FSimulationContext Context)
{
	EnterStatScope(6 );
	SetVariables_63FA603349D7F6C5DC38318FF43F97C0_VerticalInitiator_Func_(Context);
	ExitStatScope( );
}

float GetSpawnInterpolation()
{
	return 1.0f;}



void HandlePreviousValuesForSpawn(inout FSimulationContext Context)
{
}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );

	float Constant = 0;
	Context.Map.NotesRibbon.Age = Constant;
	int Constant1 = 0;
	Context.Map.NotesRibbon.ExecutionState = Constant1;
	float Constant2 = 0;
	Context.Map.NotesRibbon.LoopedAge = Constant2;
	float Constant3 = 0;
	Context.Map.NotesRibbon.CurrentLoopDuration = Constant3;
	float Constant4 = 0;
	Context.Map.NotesRibbon.CurrentLoopDelay = Constant4;
	int Constant5 = 0;
	Context.Map.NotesRibbon.LoopCount = Constant5;
	float Constant6 = (0.0);
	Context.Map.NotesRibbon.NormalizedLoopAge = Constant6;
	float Constant7 = (0.0);
	Context.Map.NotesRibbon.Scalability.DistanceFraction = Constant7;
	int Constant8 = 0;
	Context.Map.System.ExecutionState = Constant8;
	int Constant9 = 0;
	Context.Map.System.ExecutionStateSource = Constant9;
	int Constant10 = 0;
	Context.Map.NotesRibbon.ExecutionStateSource = Constant10;
	float Constant11 = 0;
	Context.Map.NotesRibbon.DistanceTraveled = Constant11;
	float Constant12 = 0;
	Context.Map.NotesRibbon.SpawnRate = Constant12;
	float Constant13 = 0;
	Context.Map.NotesRibbon.SpawnRate.SpawnRemainder = Constant13;
	NiagaraSpawnInfo Constant14 = (NiagaraSpawnInfo)0;
	Context.Map.NotesRibbon.SpawnRate.SpawnOutputInfo = Constant14;
	float Constant15 = 0;
	Context.Map.PentagramRibbon.Age = Constant15;
	int Constant16 = 0;
	Context.Map.PentagramRibbon.ExecutionState = Constant16;
	float Constant17 = 0;
	Context.Map.PentagramRibbon.LoopedAge = Constant17;
	float Constant18 = 0;
	Context.Map.PentagramRibbon.CurrentLoopDuration = Constant18;
	float Constant19 = 0;
	Context.Map.PentagramRibbon.CurrentLoopDelay = Constant19;
	int Constant20 = 0;
	Context.Map.PentagramRibbon.LoopCount = Constant20;
	float Constant21 = (0.0);
	Context.Map.PentagramRibbon.NormalizedLoopAge = Constant21;
	float Constant22 = (0.0);
	Context.Map.PentagramRibbon.Scalability.DistanceFraction = Constant22;
	int Constant23 = 0;
	Context.Map.PentagramRibbon.ExecutionStateSource = Constant23;
	float Constant24 = 0;
	Context.Map.PentagramRibbon.DistanceTraveled = Constant24;
	NiagaraSpawnInfo Constant25 = (NiagaraSpawnInfo)0;
	Context.Map.PentagramRibbon.SpawnBurst_Instantaneous.SpawnBurst = Constant25;
	float Constant26 = 0;
	Context.Map.Core.Age = Constant26;
	int Constant27 = 0;
	Context.Map.Core.ExecutionState = Constant27;
	float Constant28 = 0;
	Context.Map.Core.CurrentLoopDuration = Constant28;
	float Constant29 = 0;
	Context.Map.Core.LoopedAge = Constant29;
	int Constant30 = 0;
	Context.Map.Core.LoopCount = Constant30;
	float Constant31 = (0.0);
	Context.Map.Core.NormalizedLoopAge = Constant31;
	float Constant32 = (0.0);
	Context.Map.Core.Scalability.DistanceFraction = Constant32;
	int Constant33 = 0;
	Context.Map.Core.ExecutionStateSource = Constant33;
	float Constant34 = 0;
	Context.Map.Core.DistanceTraveled = Constant34;
	NiagaraSpawnInfo Constant35 = (NiagaraSpawnInfo)0;
	Context.Map.Core.SpawnBurst_Instantaneous.SpawnBurst = Constant35;
	float Constant36 = 0;
	Context.Map.VerticalAttractor.Age = Constant36;
	int Constant37 = 0;
	Context.Map.VerticalAttractor.ExecutionState = Constant37;
	float Constant38 = 0;
	Context.Map.VerticalAttractor.LoopedAge = Constant38;
	float Constant39 = 0;
	Context.Map.VerticalAttractor.CurrentLoopDuration = Constant39;
	float Constant40 = 0;
	Context.Map.VerticalAttractor.CurrentLoopDelay = Constant40;
	int Constant41 = 0;
	Context.Map.VerticalAttractor.LoopCount = Constant41;
	float Constant42 = (0.0);
	Context.Map.VerticalAttractor.NormalizedLoopAge = Constant42;
	float Constant43 = (0.0);
	Context.Map.VerticalAttractor.Scalability.DistanceFraction = Constant43;
	int Constant44 = 0;
	Context.Map.VerticalAttractor.ExecutionStateSource = Constant44;
	float Constant45 = 0;
	Context.Map.VerticalAttractor.DistanceTraveled = Constant45;
	NiagaraSpawnInfo Constant46 = (NiagaraSpawnInfo)0;
	Context.Map.VerticalAttractor.SpawnBurst_Instantaneous.SpawnBurst = Constant46;
	float Constant47 = 0;
	Context.Map.VerticalInitiator.Age = Constant47;
	int Constant48 = 0;
	Context.Map.VerticalInitiator.ExecutionState = Constant48;
	float Constant49 = 0;
	Context.Map.VerticalInitiator.CurrentLoopDuration = Constant49;
	float Constant50 = 0;
	Context.Map.VerticalInitiator.LoopedAge = Constant50;
	int Constant51 = 0;
	Context.Map.VerticalInitiator.LoopCount = Constant51;
	float Constant52 = (0.0);
	Context.Map.VerticalInitiator.NormalizedLoopAge = Constant52;
	float Constant53 = (0.0);
	Context.Map.VerticalInitiator.Scalability.DistanceFraction = Constant53;
	int Constant54 = 0;
	Context.Map.VerticalInitiator.ExecutionStateSource = Constant54;
	float Constant55 = 0;
	Context.Map.VerticalInitiator.DistanceTraveled = Constant55;
	NiagaraSpawnInfo Constant56 = (NiagaraSpawnInfo)0;
	Context.Map.VerticalInitiator.SpawnBurst_Instantaneous.SpawnBurst = Constant56;
	float Constant57 = 0;
	Context.Map.System.Age = Constant57;
	float Constant58 = 0;
	Context.Map.System.CurrentLoopDuration = Constant58;
	float Constant59 = 0;
	Context.Map.System.LoopedAge = Constant59;
	int Constant60 = 0;
	Context.Map.System.LoopCount = Constant60;
	float Constant61 = (0.0);
	Context.Map.System.NormalizedLoopAge = Constant61;
	bool Constant62 = false;
	Context.Map.System.bCompleteOnInactive = Constant62;

	EnterStatScope(1 );
	NotesRibbon_74D5A51F455A325AC303E896FB5AB72E_Func_(Context);
	ExitStatScope( );
	EnterStatScope(2 );
	PentagramRibbon_5A12BF0D4CE507FC7FD8DA901BA7DDE5_Func_(Context);
	ExitStatScope( );
	EnterStatScope(3 );
	Core_E568DC9E48B203F38AF78FA1DA8EBF3A_Func_(Context);
	ExitStatScope( );
	EnterStatScope(4 );
	VerticalAttractor_CDA5E1264D3C5FA0D0FF9EBDAA07D65B_Func_(Context);
	ExitStatScope( );
	EnterStatScope(5 );
	VerticalInitiator_CF4E88134CDB351D0C7F7D9ACDBA126A_Func_(Context);
	ExitStatScope( );




	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(7 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Core.Age = 0.0f;
	Context.Map.Core.CurrentLoopDuration = 0.0f;
	Context.Map.Core.DistanceTraveled = 0.0f;
	Context.Map.Core.ExecutionState = 0;
	Context.Map.Core.ExecutionStateSource = 0;
	Context.Map.Core.LoopCount = 0;
	Context.Map.Core.LoopedAge = 0.0f;
	Context.Map.Core.NormalizedLoopAge = 0.0f;
	Context.Map.Core.Scalability.DistanceFraction = 0.0f;
	Context.Map.Core.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Core.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Core.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Core.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Emitter.RandomSeed = 0;
	Context.Map.NotesRibbon.Age = 0.0f;
	Context.Map.NotesRibbon.CurrentLoopDelay = 0.0f;
	Context.Map.NotesRibbon.CurrentLoopDuration = 0.0f;
	Context.Map.NotesRibbon.DistanceTraveled = 0.0f;
	Context.Map.NotesRibbon.ExecutionState = 0;
	Context.Map.NotesRibbon.ExecutionStateSource = 0;
	Context.Map.NotesRibbon.LoopCount = 0;
	Context.Map.NotesRibbon.LoopedAge = 0.0f;
	Context.Map.NotesRibbon.NormalizedLoopAge = 0.0f;
	Context.Map.NotesRibbon.Scalability.DistanceFraction = 0.0f;
	Context.Map.NotesRibbon.SpawnRate = 0.0f;
	Context.Map.NotesRibbon.SpawnRate.SpawnOutputInfo.Count = 0;
	Context.Map.NotesRibbon.SpawnRate.SpawnOutputInfo.InterpStartDt = 0.0f;
	Context.Map.NotesRibbon.SpawnRate.SpawnOutputInfo.IntervalDt = 0.0f;
	Context.Map.NotesRibbon.SpawnRate.SpawnOutputInfo.SpawnGroup = 0;
	Context.Map.NotesRibbon.SpawnRate.SpawnRemainder = 0.0f;
	Context.Map.PentagramRibbon.Age = 0.0f;
	Context.Map.PentagramRibbon.CurrentLoopDelay = 0.0f;
	Context.Map.PentagramRibbon.CurrentLoopDuration = 0.0f;
	Context.Map.PentagramRibbon.DistanceTraveled = 0.0f;
	Context.Map.PentagramRibbon.ExecutionState = 0;
	Context.Map.PentagramRibbon.ExecutionStateSource = 0;
	Context.Map.PentagramRibbon.LoopCount = 0;
	Context.Map.PentagramRibbon.LoopedAge = 0.0f;
	Context.Map.PentagramRibbon.NormalizedLoopAge = 0.0f;
	Context.Map.PentagramRibbon.Scalability.DistanceFraction = 0.0f;
	Context.Map.PentagramRibbon.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.PentagramRibbon.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.PentagramRibbon.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.PentagramRibbon.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.System.Age = 0.0f;
	Context.Map.System.bCompleteOnInactive = false;
	Context.Map.System.CurrentLoopDuration = 0.0f;
	Context.Map.System.ExecutionState = 0;
	Context.Map.System.ExecutionStateSource = 0;
	Context.Map.System.LoopCount = 0;
	Context.Map.System.LoopedAge = 0.0f;
	Context.Map.System.NormalizedLoopAge = 0.0f;
	Context.Map.VerticalAttractor.Age = 0.0f;
	Context.Map.VerticalAttractor.CurrentLoopDelay = 0.0f;
	Context.Map.VerticalAttractor.CurrentLoopDuration = 0.0f;
	Context.Map.VerticalAttractor.DistanceTraveled = 0.0f;
	Context.Map.VerticalAttractor.ExecutionState = 0;
	Context.Map.VerticalAttractor.ExecutionStateSource = 0;
	Context.Map.VerticalAttractor.LoopCount = 0;
	Context.Map.VerticalAttractor.LoopedAge = 0.0f;
	Context.Map.VerticalAttractor.NormalizedLoopAge = 0.0f;
	Context.Map.VerticalAttractor.Scalability.DistanceFraction = 0.0f;
	Context.Map.VerticalAttractor.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.VerticalAttractor.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.VerticalAttractor.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.VerticalAttractor.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.VerticalInitiator.Age = 0.0f;
	Context.Map.VerticalInitiator.CurrentLoopDuration = 0.0f;
	Context.Map.VerticalInitiator.DistanceTraveled = 0.0f;
	Context.Map.VerticalInitiator.ExecutionState = 0;
	Context.Map.VerticalInitiator.ExecutionStateSource = 0;
	Context.Map.VerticalInitiator.LoopCount = 0;
	Context.Map.VerticalInitiator.LoopedAge = 0.0f;
	Context.Map.VerticalInitiator.NormalizedLoopAge = 0.0f;
	Context.Map.VerticalInitiator.Scalability.DistanceFraction = 0.0f;
	Context.Map.VerticalInitiator.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.VerticalInitiator.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.VerticalInitiator.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.VerticalInitiator.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Engine.Emitter.InstanceSeed = InputDataInt(1, 0);
	Context.Map.Engine.Emitter.TotalSpawnedParticles = InputDataInt(1, 1);
	Context.Map.Engine.System.RandomSeed = InputDataInt(1, 2);
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
EnterStatScope(8 );
	Simulate(Context);
ExitStatScope( );
	WriteDataSets(Context);
	{
	int TmpWriteIndex = OutputIndex(0, false, true);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.Map.Core.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.Core.CurrentLoopDuration);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.Core.DistanceTraveled);
	OutputDataInt(0, 0, TmpWriteIndex, Context.Map.Core.ExecutionState);
	OutputDataInt(0, 1, TmpWriteIndex, Context.Map.Core.ExecutionStateSource);
	OutputDataInt(0, 2, TmpWriteIndex, Context.Map.Core.LoopCount);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.Map.Core.LoopedAge);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.Map.Core.NormalizedLoopAge);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.Map.Core.Scalability.DistanceFraction);
	OutputDataInt(0, 3, TmpWriteIndex, Context.Map.Core.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.Map.Core.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.Map.Core.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 4, TmpWriteIndex, Context.Map.Core.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataInt(0, 5, TmpWriteIndex, Context.Map.Emitter.RandomSeed);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.NotesRibbon.Age);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.NotesRibbon.CurrentLoopDelay);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.Map.NotesRibbon.CurrentLoopDuration);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.Map.NotesRibbon.DistanceTraveled);
	OutputDataInt(0, 6, TmpWriteIndex, Context.Map.NotesRibbon.ExecutionState);
	OutputDataInt(0, 7, TmpWriteIndex, Context.Map.NotesRibbon.ExecutionStateSource);
	OutputDataInt(0, 8, TmpWriteIndex, Context.Map.NotesRibbon.LoopCount);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.NotesRibbon.LoopedAge);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.Map.NotesRibbon.NormalizedLoopAge);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.NotesRibbon.Scalability.DistanceFraction);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.NotesRibbon.SpawnRate);
	OutputDataInt(0, 9, TmpWriteIndex, Context.Map.NotesRibbon.SpawnRate.SpawnOutputInfo.Count);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.NotesRibbon.SpawnRate.SpawnOutputInfo.InterpStartDt);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.Map.NotesRibbon.SpawnRate.SpawnOutputInfo.IntervalDt);
	OutputDataInt(0, 10, TmpWriteIndex, Context.Map.NotesRibbon.SpawnRate.SpawnOutputInfo.SpawnGroup);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.Map.NotesRibbon.SpawnRate.SpawnRemainder);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.Map.PentagramRibbon.Age);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.Map.PentagramRibbon.CurrentLoopDelay);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.PentagramRibbon.CurrentLoopDuration);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.PentagramRibbon.DistanceTraveled);
	OutputDataInt(0, 11, TmpWriteIndex, Context.Map.PentagramRibbon.ExecutionState);
	OutputDataInt(0, 12, TmpWriteIndex, Context.Map.PentagramRibbon.ExecutionStateSource);
	OutputDataInt(0, 13, TmpWriteIndex, Context.Map.PentagramRibbon.LoopCount);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.Map.PentagramRibbon.LoopedAge);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.Map.PentagramRibbon.NormalizedLoopAge);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.Map.PentagramRibbon.Scalability.DistanceFraction);
	OutputDataInt(0, 14, TmpWriteIndex, Context.Map.PentagramRibbon.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.Map.PentagramRibbon.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.Map.PentagramRibbon.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 15, TmpWriteIndex, Context.Map.PentagramRibbon.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.Map.System.Age);
	OutputDataBool(0, 16, TmpWriteIndex, Context.Map.System.bCompleteOnInactive);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.Map.System.CurrentLoopDuration);
	OutputDataInt(0, 17, TmpWriteIndex, Context.Map.System.ExecutionState);
	OutputDataInt(0, 18, TmpWriteIndex, Context.Map.System.ExecutionStateSource);
	OutputDataInt(0, 19, TmpWriteIndex, Context.Map.System.LoopCount);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.Map.System.LoopedAge);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.Map.System.NormalizedLoopAge);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.Map.VerticalAttractor.Age);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.Map.VerticalAttractor.CurrentLoopDelay);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.Map.VerticalAttractor.CurrentLoopDuration);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.Map.VerticalAttractor.DistanceTraveled);
	OutputDataInt(0, 20, TmpWriteIndex, Context.Map.VerticalAttractor.ExecutionState);
	OutputDataInt(0, 21, TmpWriteIndex, Context.Map.VerticalAttractor.ExecutionStateSource);
	OutputDataInt(0, 22, TmpWriteIndex, Context.Map.VerticalAttractor.LoopCount);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.Map.VerticalAttractor.LoopedAge);
	OutputDataFloat(0, 37, TmpWriteIndex, Context.Map.VerticalAttractor.NormalizedLoopAge);
	OutputDataFloat(0, 38, TmpWriteIndex, Context.Map.VerticalAttractor.Scalability.DistanceFraction);
	OutputDataInt(0, 23, TmpWriteIndex, Context.Map.VerticalAttractor.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 39, TmpWriteIndex, Context.Map.VerticalAttractor.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 40, TmpWriteIndex, Context.Map.VerticalAttractor.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 24, TmpWriteIndex, Context.Map.VerticalAttractor.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataFloat(0, 41, TmpWriteIndex, Context.Map.VerticalInitiator.Age);
	OutputDataFloat(0, 42, TmpWriteIndex, Context.Map.VerticalInitiator.CurrentLoopDuration);
	OutputDataFloat(0, 43, TmpWriteIndex, Context.Map.VerticalInitiator.DistanceTraveled);
	OutputDataInt(0, 25, TmpWriteIndex, Context.Map.VerticalInitiator.ExecutionState);
	OutputDataInt(0, 26, TmpWriteIndex, Context.Map.VerticalInitiator.ExecutionStateSource);
	OutputDataInt(0, 27, TmpWriteIndex, Context.Map.VerticalInitiator.LoopCount);
	OutputDataFloat(0, 44, TmpWriteIndex, Context.Map.VerticalInitiator.LoopedAge);
	OutputDataFloat(0, 45, TmpWriteIndex, Context.Map.VerticalInitiator.NormalizedLoopAge);
	OutputDataFloat(0, 46, TmpWriteIndex, Context.Map.VerticalInitiator.Scalability.DistanceFraction);
	OutputDataInt(0, 28, TmpWriteIndex, Context.Map.VerticalInitiator.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 47, TmpWriteIndex, Context.Map.VerticalInitiator.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 48, TmpWriteIndex, Context.Map.VerticalInitiator.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 29, TmpWriteIndex, Context.Map.VerticalInitiator.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	}
ExitStatScope( );
}
#line 828 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
